/* File: AverageCaseSorting.java
 * Author: Teng Xu
 * Date: 2/11/16
 * 
 * The жи(....). estimate of the average-case height of a BST is жи(log(n)).
 * C is 3 .   
 */

import java.util.Random;
import java.awt.Color; 
import java.lang.*;

public class AverageCaseBSTs {
public static class Node {
  int key;
  Node left;
  Node right;

  public Node(int k) {
   left = null;
   right = null;
   key = k;
  }

  public Node(int k, Node left, Node right) {
   key = k;
   this.left = left;
   this.right = right;

  }
 }

 // Size is number of nodes in the tree

   public static int size(Node t) {
  if (t == null)
   return 0;
  else
   return 1 + size(t.left) + size(t.right);
 }


   // Height of a binary tree is number of links in longest path, note that
   //     empty tree has height -1.

 public static int height(Node t) {
     if (t == null)
     return -1;
  else 
          return 1 + Math.max( height(t.left), height(t.right) ); 
 }


   public static boolean member(Node t, int key) {
  if (t == null)
   return false;
  else if (key < t.key) {
   return member(t.left, key);
  } else if (key > t.key) {
   return member(t.right, key);
  } else
   return true;
 }

 public static Node insert(Node t, int key) {
  if (t == null)
   return new Node(key);
  else if (key < t.key) {
   t.left = insert(t.left, key);
   return t;
  } else if (key > t.key) {
   t.right = insert(t.right, key);
   return t;
  } else
   return t;
 }
  
    private static int[] genRandomArray(int size) {
    Random r = new Random();
    int[] arr = new int[size];
    for (int i = 0; i < arr.length; i++)
        arr[i] = r.nextInt();
    return arr;
}
    private static Random R = new Random();

    private static int runBSTInsertion(int N) { 
          int sum = 0; 
          for(int i = 0; i < 1000; ++i) {
          Node B = new Node(N);
          int[] A = genRandomArray(N); 
          for(int c = 0;c< A.length;c++)
             insert(B, A[c]);
           sum += height(B); 
           } 
           return sum/1000;         
    }
      
    public static void main(String[] args) {
        
        int N = 100;
        
        double pointRadius = 0.005;
        double lineRadius = 0.001;
        
        StdDraw.setXscale(0, N);
        StdDraw.setYscale(0, N);
        StdDraw.setPenRadius(pointRadius);
        StdDraw.setPenColor(Color.black);       // Google "Java Color"; the first link gives all the colors
        StdDraw.line(0,0,0,10*N); 
        StdDraw.text(N,20,"" + N);
        StdDraw.line(0,0,N,0);
        StdDraw.text(5,10*N,"" + 10*N);
        
        double prevX, prevY;
        
        StdDraw.setPenColor(Color.blue);
        StdDraw.text(80,18,"BSTInsertion Sort");
        prevX = 0; prevY = 0; 
        for (int i = 1; i <= N; i++) {
            int y = (int) runBSTInsertion(i);      
            StdDraw.setPenRadius(pointRadius);
            StdDraw.point(i, y);
            StdDraw.setPenRadius(lineRadius);
            StdDraw.line(prevX, prevY, i, y);
            prevX = i; prevY = y;
        }
            
        StdDraw.setPenColor(Color.red);
        StdDraw.text(80,22,"C");
        prevX = 0; prevY = 0; 
        for (int i = 1; i <= N; i++) {
            int y = 3*(int)Math.log(i);                   
            StdDraw.setPenRadius(pointRadius);
            StdDraw.point(i, y);
            StdDraw.setPenRadius(lineRadius);
            StdDraw.line(prevX, prevY, i, y);
            prevX = i; prevY = y;
        }          
               
                 
    }
    
}