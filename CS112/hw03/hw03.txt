
1.For each function f from the following list of functions, determine which g makes the equality f(x) = ?(g(x)) true. The point of representing a function in this form is to create the simplest possible function g(x), e.g., do not include a coefficient in g(x), since it does not matter. Represent your answer as an equality (e.g., p(x) = ?(n2)). To be clear, the correct answer to the first function is shown.
a(x) = 8x + 3 = ?(x) 
b(x) = 12x + x2 + 64 = ?(x) 
c(x) = 2log(x) + x = ?(log(x)) 
d(x) = log(x) + 2 = ?(log(x)) 
e(x) = sqrt(2x) = ?(sqrt(x))



2.Using zeta(....) notation, determine the number of times the count() function is called when the following code fragment runs, in terms of the variable N.
for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++)
        for (int k = 0; k < j; k++)
            count();
Include a short explanation of your answer by explaining how many times each loop iterates.

loop(i) will iterate zeta(N) times
loop(j) will iterate zeta(N) times 
loop(k) will iterate zeta(N) times
so count() will run zeta(N*N*N) times.




3.Using zeta(....) notation, determine the number of times the count() function is called when the following code fragment runs, in terms of the variable n.
for (int i = N; i > 0; i /= 2)
   for (int j = 0; j < N; j++)
       for (int k = 0; k < 1000; k++)
           count();
Include a short explanation of your answer by explaining how many times each loop iterates.
loop(i) will iterate zeta(log2(N)) times
loop(j) will iterate zeta(N) times
loop(k) will iterate 1000 times
so count() will run zeta(log2(N)*N) times.




4.Perform this code for insertion sort on the following input array, showing the array after every swap.
public static void insertion(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
        for (int j = i; j > 0; j--) {
            if (arr[j] < arr[j - 1]) {
                swap(arr, j, j - 1);
               // each time you get here, write out the array
            }         
        }
    }
}
Execute the algorithm on the following input:

+-------------------+
| 3 | 5 | 8 | 2 | 1 | 
+-------------------+
1:
+-------------------+
| 3 | 1 | 8 | 2 | 5 | 
+-------------------+
2:
+-------------------+
| 3 | 1 | 2 | 8 | 5 | 
+-------------------+
3:
+-------------------+
| 2 | 1 | 3 | 8 | 5 | 
+-------------------+
4:
+-------------------+
| 1 | 2 | 3 | 8 | 5 | 
+-------------------+
5:
+-------------------+
| 1 | 2 | 3 | 5 | 8 | 
+-------------------+




5.Perform selection sort on the following input array, showing the array after each swap.
public static void selection(int[] arr) {
    int k;
    for (int i = 0; i < arr.length; i++) {
        k = i;
        for (int j = i + 1; j < arr.length; j++) {
            if (arr[j] < arr[k])                            
                k = j;
        }
        swap(arr, i, k);
        /// each time you get here, write out the array
    }
}
Execute the algorithm on the following input:

+-------------------+
| 9 | 6 | 4 | 2 | 3 |
+-------------------+
1:
+-------------------+
| 3 | 6 | 4 | 2 | 9 |
+-------------------+
2:
+-------------------+
| 3 | 2 | 4 | 6 | 9 |
+-------------------+
3:
+-------------------+
| 2 | 3 | 4 | 6 | 9 |
+-------------------+



6.Show how the following input arrays would be partitioned by quicksort, and state the size of the 2 subproblems. You do not have to show every swap ¡ª just the final partitioned array. Here is an example:

   
       +-------------------------------+ 
(Ex)   | 6 | 5 | 9 | 7 | 2 | 1 | 3 | 4 | 
       +-------------------------------+

        +-------------------------------+ 
(Ans)   | 1 | 5 | 4 | 3 | 2 | 6 | 7 | 9 |      6 is pivot, in its final location
        +-------------------------------+      Left subproblem has 5 numbers, right has 2
        |-------------------|   |-------|
      
         
      +---------------------------+ 
(A)   | 5 | 8 | 3 | 7 | 9 | 2 | 1 | 
      +---------------------------+  
      +---------------------------+ 
      | 1 | 3 | 2 | 5 | 9 | 7 | 8 | 
      +---------------------------+  
      |----------|pivot|----------|
            

      +---------------------------+ 
(B)   | 2 | 8 | 3 | 7 | 5 | 1 | 9 | 
      +---------------------------+
      +---------------------------+ 
      | 1 | 2 | 3 | 7 | 5 | 8 | 9 | 
      +---------------------------+
      |--|pivot|------------------|

      
      +---------------------------+ 
(C)   | 9 | 8 | 3 | 7 | 1 | 2 | 5 | 
      +---------------------------+
      +---------------------------+ 
      | 8 | 3 | 7 | 1 | 2 | 5 | 9 | 
      +---------------------------+
      |----------------------|pivot|
 

7.In our implementation of quicksort, we always choose the leftmost element to be the pivot at the partition step. Would we be guaranteed to get better worst-case performance if we always chose the middle element as the pivot? Why or why not?

No, because it takes same amount of steps in the worst case.


8.Perform quicksort on the following input array, showing the array after every partition step; if you get to a subproblem with two numbers, you can simply rearrange them if necessary without doing an explicit partition. Be sure to indicate which value is the pivot.
+-----------------------+ 
| 4 | 9 | 8 | 5 | 7 | 2 | 
+-----------------------+ 

+-----------------------+ 
| 4 | 9 | 8 | 5 | 7 | 2 | 
+-----------------------+ 
|pivot|-----------------|
+-----------------------+ 
| 4 | 2 | 8 | 5 | 7 | 9 | 
+-----------------------+ 
|pivot|-----------------|
+-----------------------+ 
| 2 | 4 | 8 | 5 | 7 | 9 | 
+-----------------------+ 
|--|pivot|--------------|
   get two subproblems

+-----------------------+ 
| 2 | 4 | 5 | 7 | 8 | 9 | 
+-----------------------+ 




9.Now perform merge sort on the following input array, showing each subarray after it is merged with another subarray (you will sort all sublists of size 1, then of size 2, and finally of size 4).
+-------------------------------+ 
| 9 | 5 | 3 | 2 | 1 | 8 | 7 | 4 | 
+-------------------------------+ 

| 9 | 5 | 3 | 2 | 1 | 8 | 7 | 4 |

 |5|9|   |2|3|   |1|8|   |4|7| 

   |2|3|5|9|       |1|4|7|8|

      |1|2|3|4|5|7|8|9|