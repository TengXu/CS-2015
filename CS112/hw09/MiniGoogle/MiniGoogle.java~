/*
 * MiniGoogle.java
 *
 * A client program that uses the DatabaseIterator
 * and Article classes, along with additional data
 * structures, to allow a user to create, modify
 * and interact with a encyclopedia database.
 *
 * Author: Teng Xu
 * Date: April 16, 2014
 */

import java.util.*;

public class MiniGoogle {
  private static final String [] blackList = { "the", "of", "and", "a", "to", "in", "is", 
    "you", "that", "it", "he", "was", "for", "on", "are", "as", "with", 
    "his", "they", "i", "at", "be", "this", "have", "from", "or", "one", 
    "had", "by", "word", "but", "not", "what", "all", "were", "we", "when", 
    "your", "can", "said", "there", "use", "an", "each", "which", "she", 
    "do", "how", "their", "if", "will", "up", "other", "about", "out", "many", 
    "then", "them", "these", "so", "some", "her", "would", "make", "like", 
    "him", "into", "time", "has", "look", "two", "more", "write", "go", "see", 
    "number", "no", "way", "could", "people",  "my", "than", "first", "water", 
    "been", "call", "who", "oil", "its", "now", "find", "long", "down", "day", 
    "did", "get", "come", "made", "may", "part" };
  private static char[] charsToRemove = { '.' ,',', ':', ';', '!', '?', '"','\'' , '/', '-', '(', ')', '~'};  
  private static MaxHeap H = new MaxHeap();
    
  private static Article[] getArticleList(DatabaseIterator db) { 

    int count = db.getNumArticles(); 

    Article[] list = new Article[count];
    for(int i = 0; i < count; ++i)
      list[i] = db.next();
    
    return list; 
  }
  
  private static DatabaseIterator setupDatabase(String path) {
    return new DatabaseIterator(path);
  }
  
  private static void addArticle(Scanner s, ArticleTable D) {
    System.out.println();
    System.out.println("Add an article");
    System.out.println("==============");
    
    System.out.print("Enter article title: ");
    String title = s.nextLine();
    
    System.out.println("You may now enter the body of the article.");
    System.out.println("Press return two times when you are done.");
    
    String body = "";
    String line = "";
    do {
      line = s.nextLine();
      body += line + "\n";
    } while (!line.equals(""));
    
    D.add(new Article(title, body));
  }
  
  
  private static void removeArticle(Scanner s, ArticleTable D) {
    System.out.println();
    System.out.println("Remove an article");
    System.out.println("=================");
    
    System.out.print("Enter article title: ");
    String title = s.nextLine();
    
    
    D.remove(title);
  }
  
  
  private static void titleSearch(Scanner s, ArticleTable D) {
    System.out.println();
    System.out.println("Search by article title");
    System.out.println("=======================");
    
    System.out.print("Enter article title: ");
    String title = s.nextLine();
    
    Article a = D.lookup(title);
    if(a != null)
      System.out.println(a);
    else {
      System.out.println("Article not found!"); 
      return; 
    }
    
    System.out.println("Press return when finished reading.");
    s.nextLine();
  }
     private static String[] split(String a){
     String[] b = a.split("\\s+");
     return b;
   }

   private static String preprocess(String s){     // from my hw02 WordPalindromeTest
     s = s.toLowerCase();
     for(int x = 0; x < charsToRemove.length; x++){
         String y = Character.toString(charsToRemove[x]);
         s = s.replace(y, "");
       }
     return s;
   }   


   private static boolean blacklisted(String s){
     for(int i =0;i< blackList.length;i++){
       if(s.compareTo(blackList[i])==0)
         return false;
     }
     return true;
   }   

   private static double getCosineSimilarity(String s, String t){
     s = preprocess(s);
     t = preprocess(t);
     String[] S = s.split("\\s+");
     String[] T = t.split("\\s+");    
     TermFrequencyTable A = new TermFrequencyTable();
     for(int i = 0; i<S.length;i++){
       if(blacklisted(S[i])){
         A.insert(S[i], 0);
       }
     }
     for(int i = 0; i<T.length;i++){
       if(blacklisted(T[i])){
         A.insert(T[i], 1);         
       }
     }     
     double result = A.cosineSimilarity();
     return result;
   }    

   public static void phraseSearch(Scanner s, ArticleTable T){
     String phrase = s.nextLine();
     T.reset();
     while(T.hasNext()) {
       Article a = T.next(); 
       double result = getCosineSimilarity(phrase, a.body);
       a.putCS(result);
       if(result > 0.001){
         H.insert(a);        
       }     
     }
     Article first = null;
     if((first = H.getMax()) == null)
       System.out.println( "No matching articles found!");
     else{
     System.out.println(first);
     if((first = H.getMax()) != null)
        System.out.println(first);
     if((first = H.getMax()) != null)
        System.out.println(first);
     }
   }
   
  
  public static void main(String[] args) {
    Scanner user = new Scanner(System.in);
    
    String dbPath = "articles/";
    
    DatabaseIterator db = setupDatabase(dbPath);
    
    System.out.println("Read " + db.getNumArticles() + 
                       " articles from disk.");
    
    ArticleTable L = new ArticleTable(); 
    Article[] A = getArticleList(db);
    L.initialize(A);
    
    int choice = -1;
    do {
      System.out.println();
      System.out.println("Welcome to Minipedia!");
      System.out.println("=====================");
      System.out.println("Make a selection from the " +
                         "following options:");
      System.out.println();
      System.out.println("Manipulating the database");
      System.out.println("-------------------------");
      System.out.println("    1. add a new article");
      System.out.println("    2. remove an article");
      System.out.println("    3. Search by article title");
      System.out.println("    4. Search by phrase (list of keywords)");      
      System.out.println();
      
      System.out.print("Enter a selection (1-4, or 0 to quit): ");
      
      choice = user.nextInt();
      user.nextLine();
      
      switch (choice) {
        case 0:
          return;
          
        case 1:
          addArticle(user, L);
          break;
          
        case 2:
          removeArticle(user, L);
          break;
          
        case 3:
          titleSearch(user, L);
          break;
          
        case 4:
          phraseSearch(user, L);
          break;          
          
        default:
          break;
      }
      
      choice = -1;
      
    } while (choice < 0 || choice > 4);
    
  }
  
  
}
