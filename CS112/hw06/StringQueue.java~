/* File: StringQueue.java
 * Date: 2/26/2016
 * Author:  Teng Xu
 * Class: CS 112, Spring 2016
 * Purpose: This is the template for HW 06, Problem B.1 (lab problem)
 */

public class StringQueue {   
    
    private Node front = null; 
    private Node rear = null;
    
    private int size = 0; 
    
    public class Node { 
        public String item; 
        public Node next; 
                
        // constructors 
        public Node() { 
            item = ""; 
            next = null; 
        } 
        
        public Node(String n) { 
            item = n; 
            next = null; 
        } 
        
        public Node(String n, Node p) { 
            item = n; 
            next = p;         
        } 
    }
    
    public void enqueue(String n){ 
      Node q = new Node(n);
      if(size == 0){
        rear = q;
        front = q;
        size++;
      }
      else{
      rear.next = q;
      rear = q;
      size++;
       }
    } 
    
    public boolean isEmpty() { 
      return(size == 0);
    }  

    public int size() {    
      return size;
    }        

    public String dequeue() throws StackUnderflowException{    
      if(size == 0)
        throw new StackUnderflowException();
      else{
      String tmp = front.item;   
      front = front.next;   
      size--;
      return tmp; 
      }
    }  
    
    // Recursive implementation of toString
    
    // wrapper method: just calls recursive helper
    public String toString() {
        return toStringAux(front);
    }
    
    // recursive helper method
    private String toStringAux(Node p) {
        if(p == null)
            return "";
        else
            return toStringAux(p.next) + p.item + " ";
    }

    
    public static void main(String[] args) {
        
        StringQueue S = new StringQueue(); 
        
        System.out.println("\n[1] First test toString on empty StringStack... Should print out:"); 
        System.out.println(""); 
        System.out.println(S); 
        
        // Use step-wise refinement to develop your program: Move the left comment marker "/*"
        // down past one test at a time as you develop each of the methods
        
             
        System.out.println("\n[2] Test size and isEmpty... Should print out:\n0  true"); 
        System.out.println(S.size() + "  " + S.isEmpty()); 
        
        System.out.println("\n[3] Push 10 strings... Should print out:\n! President for run to looney be to have You'd"); 
        S.enqueue("You'd");     
        S.enqueue("have"); 
        S.enqueue("to"); 
        S.enqueue("be");  
        S.enqueue("looney");  
        S.enqueue("to"); 
        S.enqueue("run"); 
        S.enqueue("for");
        S.enqueue("president");        
        S.enqueue("!");
         
        System.out.println(S);
        
        System.out.println("\n[4] Test size and isEmpty... Should print out:\n10  false"); 
        System.out.println(S.size() + "  " + S.isEmpty()); 
        
        System.out.println("\n[5] Dequeue and print... Should print out:"); 
        System.out.println("You'd have to be looney to run for President !");        
        while(!S.isEmpty()) {
            try {
                String s = S.dequeue(); 
                System.out.print(s+" ");
            }
            catch(StackUnderflowException e) {
                System.err.println("Queue Underflow!");
            }
        }      
        System.out.println();
        
        System.out.println("\n[6] Testing queue underflow with dequeue... Should print out:");
        System.err.println("Queue Underflow!");
        try {
            String s = S.dequeue(); 
            System.out.print(s+" ");
        }
        catch(StackUnderflowException e) {
            System.err.println("Queue Underflow!");
        } 
        
        System.out.println("\n[7] Just for fun... Should print out a long String!");
        try {
            S.enqueue("So ");   
            S.enqueue("Trump "); 
            S.enqueue("is ");
            S.enqueue("a ");            
            S.enqueue("looney! ");


            
            String s = "";
            while(!S.isEmpty())
                s += S.dequeue();
            
            for(int i = 0; i < 5; ++i)
                S.enqueue(s);
            S.enqueue("\n");
            
            String t = "";
            while(!S.isEmpty())
                t += S.dequeue();
            
            for(int i = 0; i < 5; ++i)
                S.enqueue(t);
            
            while(!S.isEmpty())
                System.out.println(S.dequeue());
            
        }
        catch(StackUnderflowException e) {
            System.err.println("Queue Underflow!");
        }
       
    }
}

class StackUnderflowException extends Exception {
}   
    
     

